generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  phone          String?          @unique
  avatarSeed     String?
  avatarStyle    String?
  avatarType     String?
  accounts       Account[]
  NoteRepository NoteRepository[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  id             String         @id
  repositoryId   String
  title          String
  content        String
  path           String
  tags           String[]
  category       String?
  isPublished    Boolean        @default(true)
  lastSynced     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  NoteRepository NoteRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, path])
}

model NoteRepository {
  id          String   @id
  userId      String
  name        String
  description String?
  repoUrl     String
  branch      String   @default("main")
  accessToken String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Note        Note[]
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, repoUrl])
}
